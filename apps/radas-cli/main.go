package main

import (
	"fmt"
	"os"
	"time"
	"sort"
    "strings"
	"github.com/spf13/cobra"
	
	"radas/cmd/frontend"
	"radas/cmd/backend"
	"radas/cmd/design"
	"radas/cmd/devops"
	"radas/cmd/rootcmd"
	"radas/constants"
	"radas/internal/updater"
)

var (
	projectFlag string
	envFlag     string
)

func main() {
	// Root command
	rootCmd := &cobra.Command{
		Use:   "radas",
		Short: "Radas CLI - Developer Tools",
		Long: `Radas CLI provides tools for various development teams.
It includes commands for Frontend (fe), Backend (be), DevOps, and Design teams.`,
		Version: constants.Version,
	}

	// Auto-check for updates but only print a message
	go func() {
		release, hasUpdate, err := updater.CheckForUpdate()
		if err == nil && hasUpdate {
			fmt.Printf("\nNew version %s available! Run 'radas update' to upgrade.\n\n", 
				strings.TrimPrefix(release.TagName, "v"))
		}
	}()



	rootCmd.AddCommand(rootcmd.ConfigCmd)

	// Add team commands to root
	rootCmd.AddCommand(frontend.Cmd)
	rootCmd.AddCommand(backend.Cmd)
	rootCmd.AddCommand(devops.Cmd)
	rootCmd.AddCommand(design.Cmd)
	rootCmd.AddCommand(rootcmd.InstallCmd)

	// Add sync-repo command
	rootCmd.AddCommand(rootcmd.SyncRepoCmd)

	// Add update command
	rootCmd.AddCommand(rootcmd.UpdateCmd)

	// Add version command
	rootCmd.AddCommand(rootcmd.VersionCmd)

	rootCmd.AddCommand(rootcmd.EnvCmd)
	rootCmd.AddCommand(rootcmd.RebuildCmd)
	rootCmd.AddCommand(rootcmd.SyncConfigCmd)

	// GIT commands
	rootCmd.AddCommand(rootcmd.CommitCmd)
	rootCmd.AddCommand(rootcmd.PushCmd)
	rootCmd.AddCommand(rootcmd.CreateBranchCmd)
	rootCmd.AddCommand(rootcmd.PullCmd)
	rootCmd.AddCommand(rootcmd.JustPushCmd)
	rootCmd.AddCommand(rootcmd.ListBranchCmd)
	rootCmd.AddCommand(rootcmd.DelBranchCmd)
	rootCmd.AddCommand(rootcmd.CloneCmd)

	// Execute
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

// Add this function to create .env files
func createEnvFile(envVars map[string]interface{}, projectName, envName string) error {
    // Create filename based on project and environment
    filename := fmt.Sprintf(".env.%s", envName)
    
    // Prepare content for .env file
    var content strings.Builder
    content.WriteString(fmt.Sprintf("# Environment variables for %s in %s environment\n", projectName, envName))
    content.WriteString(fmt.Sprintf("# Generated by Radas CLI on %s\n\n", time.Now().Format(time.RFC3339)))
    
    // Sort keys for consistent output
    keys := make([]string, 0, len(envVars))
    for key := range envVars {
        keys = append(keys, key)
    }
    sort.Strings(keys)
    
    // Add each variable to the content
    for _, key := range keys {
        value := envVars[key]
        stringValue := fmt.Sprintf("%v", value)
        
        // Escape values with spaces or special characters
        if strings.ContainsAny(stringValue, " \n\t\"'$") {
            stringValue = fmt.Sprintf("\"%s\"", strings.ReplaceAll(stringValue, "\"", "\\\""))
        }
        
        content.WriteString(fmt.Sprintf("%s=%s\n", key, stringValue))
    }
    
    // Write to file
    err := os.WriteFile(filename, []byte(content.String()), 0644)
    if err != nil {
        return fmt.Errorf("error creating .env file: %v", err)
    }
    
    fmt.Printf("Environment variables saved to %s\n", filename)
    return nil
}
